{"version":3,"sources":["FlagIcon.js","App.js","reportWebVitals.js","index.js"],"names":["FlagIcon","FlagIconFactory","React","useCssModules","App","useState","code","title","curr_code","countries","toggleContents","setToggleContents","toggleContents2","setToggleContents2","baseCurrency","setBaseCurrency","targetCurrency","setTargetCurrency","exchangeRates","setExchangeRates","baseCurrencySelect","e","targetCurrencySelect","Date","startDate","setStartDate","endDate","setEndDate","startDateRate","format","endDateRate","a","fetch","response","json","jsonData","rates","console","error","log","className","Form","Container","Row","Col","sm","md","lg","Dropdown","onSelect","eventKey","find","Toggle","variant","id","Menu","map","Item","dateFormat","selected","minDate","subYears","maxDate","addDays","onChange","date","Button","size","block","onClick","getRatesFromDates","then","res","list","Object","keys","forEach","key","push","baseCurrencyName","targetCurrencyName","targetCurrencyValue","sort","b","getTime","JSON","stringify","Table","responsive","striped","bordered","hover","rateArray","index","Math","round","Number","EPSILON","toFixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAOeA,EAFEC,YAAgBC,IAAO,CAAEC,eAAe,I,wDCmO1CC,MAlNf,WAAe,MAGOC,mBAAS,CAC3B,CAAEC,KAAM,KAAMC,MAAO,oBAAqBC,UAAW,OACrD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,kBAAmBC,UAAW,OACnD,CAAEF,KAAM,KAAMC,MAAO,kBAAmBC,UAAW,OACnD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,gBAAiBC,UAAW,OACjD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,mBAAoBC,UAAW,OACpD,CAAEF,KAAM,KAAMC,MAAO,mBAAoBC,UAAW,OACpD,CAAEF,KAAM,KAAMC,MAAO,kBAAmBC,UAAW,OACnD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,oBAAqBC,UAAW,OACrD,CAAEF,KAAM,KAAMC,MAAO,iBAAkBC,UAAW,OAClD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,oBAAqBC,UAAW,OACrD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,qBAAsBC,UAAW,OACtD,CAAEF,KAAM,KAAMC,MAAO,kBAAmBC,UAAW,OACnD,CAAEF,KAAM,KAAMC,MAAO,kBAAmBC,UAAW,OACnD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,iBAAkBC,UAAW,OAClD,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,iBAAkBC,UAAW,OAClD,CAAEF,KAAM,KAAMC,MAAO,mBAAoBC,UAAW,OACpD,CAAEF,KAAM,KAAMC,MAAO,qBAAsBC,UAAW,OACtD,CAAEF,KAAM,KAAMC,MAAO,mBAAoBC,UAAW,OACpD,CAAEF,KAAM,KAAMC,MAAO,gBAAiBC,UAAW,OACjD,CAAEF,KAAM,KAAMC,MAAO,cAAeC,UAAW,OAC/C,CAAEF,KAAM,KAAMC,MAAO,YAAaC,UAAW,OAC7C,CAAEF,KAAM,KAAMC,MAAO,eAAgBC,UAAW,OAChD,CAAEF,KAAM,KAAMC,MAAO,YAAaC,UAAW,SAhCxCC,EAHM,sBAqC+BJ,mBAAS,0BArCxC,mBAqCNK,EArCM,KAqCUC,EArCV,OAsCiCN,mBAAS,4BAtC1C,mBAsCNO,EAtCM,KAsCWC,EAtCX,OAyC0BR,mBAAS,IAzCnC,mBAyCNS,EAzCM,KAyCOC,EAzCP,OA0C8BV,mBAAS,IA1CvC,mBA0CNW,EA1CM,KA0CSC,EA1CT,OA2C6BZ,mBAAS,IA3CtC,mBA2CNa,EA3CM,KA2CSC,EA3CT,KA6CPC,EAAqB,SAACC,GAC1BN,EAAgBM,IAEZC,EAAuB,SAACD,GAC5BJ,EAAkBI,IAjDP,EAqDqBhB,mBAAS,IAAIkB,MArDlC,mBAqDNC,EArDM,KAqDKC,EArDL,OAsDiBpB,mBAAS,IAAIkB,MAtD9B,mBAsDNG,EAtDM,KAsDGC,EAtDH,KAyDPC,EAAgBC,kBAAOL,EAAW,cAClCM,EAAcD,kBAAOH,EAAS,cA1DvB,4CA6Db,WAAiCF,EAAWE,EAASZ,EAAcE,GAAnE,iBAAAe,EAAA,+EAEyBC,MAAM,oDACGR,EAAY,WAAaE,EAAU,SAAWZ,EAAe,YAAcE,GAH7G,cAEQiB,EAFR,gBAIyBA,EAASC,OAJlC,cAIQC,EAJR,yBAKWA,EAASC,OALpB,kCAOIC,QAAQC,MAAR,MAPJ,2DA7Da,sBA4Fb,OADAD,QAAQE,IAAIrB,GAEV,sBAAKsB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,yDAEF,qBAAKA,UAAU,YAAf,SACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,WACE,eAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAxB,mCACyBjC,EACvB,eAACkC,EAAA,EAAD,CACEC,SAAU,SAAAC,GAAa,IAAD,EACIzC,EAAU0C,MAAK,gBAAG3C,EAAH,EAAGA,UAAH,OAAmB0C,IAAa1C,KAA/DF,EADY,EACZA,KAAMC,EADM,EACNA,MACdI,EAAkB,qCAAE,cAAC,EAAD,CAAUL,KAAMA,IAAlB,IAA4BC,OAHlD,UAKE,cAACyC,EAAA,EAASI,OAAV,CAAiBC,QAAQ,oBAAoBC,GAAG,gBAAgBd,UAAU,YAA1E,SACG9B,IAEH,cAACsC,EAAA,EAASO,KAAV,UACG9C,EAAU+C,KAAI,gBAAGlD,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,UAAhB,OACb,eAACwC,EAAA,EAASS,KAAV,CAEEP,SAAU1C,EACVyC,SAAU7B,EAHZ,UAIE,cAAC,EAAD,CAAUd,KAAMA,IAJlB,WAIuCC,IAHhCD,cASf,eAACsC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAxB,qCAC2B/B,EACzB,eAACgC,EAAA,EAAD,CACEC,SAAU,SAAAC,GAAa,IAAD,EACIzC,EAAU0C,MAAK,gBAAG3C,EAAH,EAAGA,UAAH,OAAmB0C,IAAa1C,KAA/DF,EADY,EACZA,KAAMC,EADM,EACNA,MACdM,EAAmB,qCAAE,cAAC,EAAD,CAAUP,KAAMA,IAAlB,IAA4BC,OAHnD,UAKE,cAACyC,EAAA,EAASI,OAAV,CAAiBC,QAAQ,oBAAoBC,GAAG,cAAcd,UAAU,YAAxE,SACG5B,IAEH,cAACoC,EAAA,EAASO,KAAV,UACG9C,EAAU+C,KAAI,gBAAGlD,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAOC,EAAhB,EAAgBA,UAAhB,OACb,eAACwC,EAAA,EAASS,KAAV,CAEEP,SAAU1C,EACVyC,SAAU3B,EAHZ,UAIE,cAAC,EAAD,CAAUhB,KAAMA,IAJlB,WAIuCC,IAHhCD,cASf,eAACsC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAxB,mBACSnB,EACP,cAAC,IAAD,CACE0B,GAAG,WACHI,WAAW,aACXC,SAAUnC,EACVoC,QAASC,kBAAS,IAAItC,KAAQ,IAC9BuC,QAASC,kBAAQ,IAAIxC,KAAQ,GAC7ByC,SAAU,SAAAC,GAAI,OAAIxC,EAAawC,SAEnC,eAACrB,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAxB,iBACOjB,EACL,cAAC,IAAD,CACEwB,GAAG,SACHI,WAAW,aACXC,SAAUjC,EACVkC,QAASC,kBAAS,IAAItC,KAAQ,IAC9BuC,QAASC,kBAAQ,IAAIxC,KAAQ,GAC7ByC,SAAU,SAAAC,GAAI,OAAItC,EAAWsC,YAGnC,cAACtB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACsB,EAAA,EAAD,CAAQb,QAAQ,UAAUc,KAAK,KAAKC,OAAK,EAACC,QAhGpB,WAClChC,QAAQE,IAAI,+BAzED,iDA0EX+B,CAAkB1C,EAAeE,EAAahB,EAAcE,GAC3DuD,MAAM,SAAAC,GACL,IAAIC,EAAO,GACXC,OAAOC,KAAKH,GAAKI,SAAQ,SAAAC,GACvBJ,EAAKK,KAAK,CAAEb,KAAMY,EACNE,iBAAkBjE,EAClBkE,mBAAoBhE,EAEpBiE,oBAAqBT,EAAIK,GAAK7D,QAI5CyD,EAAOA,EAAKS,MAAK,SAACnD,EAAGoD,GAAJ,OAAW,IAAI5D,KAAKQ,EAAEkC,MAAOmB,UAAa,IAAI7D,KAAK4D,EAAElB,MAAOmB,aAC7E/C,QAAQE,IAAI8C,KAAKC,UAAUb,IAC3BtD,EAAiBsD,OAgFP,oDAQV,qBAAKjC,UAAU,aAAf,SACE,cAACE,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAKC,IAAE,EAAP,SACE,mCACE,eAAC0C,EAAA,EAAD,CAAOC,YAAU,EAACC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACrC,GAAG,YAAYa,KAAK,KAAKd,QAAQ,OAA1E,UACE,gCACE,+BACE,uBACCnC,EAAcsC,KAAI,SAACoC,EAAWC,GAAZ,OACnB,+BAAiBD,EAAUb,iBAA3B,OAAiDa,EAAUZ,qBAAlDa,WAGb,gCACG3E,EAAcsC,KAAI,SAACoC,EAAWC,GAAZ,OAChB,+BACC,6BAAKD,EAAU3B,OAKf,8BAAM6B,KAAKC,MAAyD,KAAlDH,EAAUX,oBAAsBe,OAAOC,UAAkB,KAAKC,QAAQ,OANhFL,yBCzMjBM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d4a90351.chunk.js","sourcesContent":["import React from 'react';\r\nimport FlagIconFactory from 'react-flag-icon-css';\r\n\r\n// const FlagIcon = FlagIconFactory(React);\r\n// If you are not using css modules, write the following:\r\nconst FlagIcon = FlagIconFactory(React, { useCssModules: false })\r\n\r\nexport default FlagIcon;\r\n","import React, {\n  useState\n} from 'react';\nimport {\n  Container,\n  Row,\n  Col,\n  Button,\n  Dropdown,\n  Form,\n  Table\n} from 'react-bootstrap';\nimport FlagIcon from './FlagIcon.js'\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport {\n  format,\n  subYears,\n  addDays\n} from 'date-fns';\nimport './App.css';\n\nfunction App() {\n\n  // Dropdown values\n  const [countries] = useState([\n    { code: 'au', title: 'Australian Dollar', curr_code: 'AUD'},\n    { code: 'bg', title: 'Bulgaria Lev', curr_code: 'BGN'},\n    { code: 'br', title: 'Brazillian Real', curr_code: 'BRL'},\n    { code: 'ca', title: 'Canadian Dollar', curr_code: 'CAD'},\n    { code: 'cn', title: 'Chinese Yuan', curr_code: 'CNY'},\n    { code: 'hr', title: 'Croatian Kuna', curr_code: 'HRK'},\n    { code: 'cz', title: 'Czech Koruna', curr_code: 'CZK'},\n    { code: 'dk', title: 'Danish Krone', curr_code: 'DKK'},\n    { code: 'hk', title: 'Hong Kong Dollar', curr_code: 'HKD'},\n    { code: 'hu', title: 'Hungarian Forint', curr_code: 'HUF'},\n    { code: 'is', title: 'Icelandic Krona', curr_code: 'ISK'},\n    { code: 'in', title: 'Indian Rupee', curr_code: 'INR'},\n    { code: 'id', title: 'Indonesian Rupiah', curr_code: 'IDR'},\n    { code: 'il', title: 'Israeli Shekel', curr_code: 'ILS'},\n    { code: 'jp', title: 'Japanese Yen', curr_code: 'JPY'},\n    { code: 'my', title: 'Malaysian Ringgit', curr_code: 'MYR'},\n    { code: 'mx', title: 'Mexican Peso', curr_code: 'MXN'},\n    { code: 'nz', title: 'New Zealand Dollar', curr_code: 'NZD'},\n    { code: 'no', title: 'Norwegian Krone', curr_code: 'NOK'},\n    { code: 'ph', title: 'Philippine Peso', curr_code: 'PHP'},\n    { code: 'pl', title: 'Polish Zloty', curr_code: 'PLN'},\n    { code: 'gb', title: 'Pound Sterling', curr_code: 'GBP'},\n    { code: 'ro', title: 'Romanian Leu', curr_code: 'RON'},\n    { code: 'ru', title: 'Russian Rouble', curr_code: 'RUB'},\n    { code: 'sg', title: 'Singapore Dollar', curr_code: 'SGD'},\n    { code: 'za', title: 'South African Rand', curr_code: 'ZAR'},\n    { code: 'kr', title: 'South Korean Won', curr_code: 'KRW'},\n    { code: 'se', title: 'Swedish Krona', curr_code: 'SEK'},\n    { code: 'ch', title: 'Swiss Franc', curr_code: 'CHF'},\n    { code: 'th', title: 'Thai Baht', curr_code: 'THB'},\n    { code: 'tr', title: 'Turkish Lira', curr_code: 'TRY'},\n    { code: 'us', title: 'US Dollar', curr_code: 'USD'}\n  ]);\n  const [toggleContents, setToggleContents] = useState(\"Select a base currency\");\n  const [toggleContents2, setToggleContents2] = useState(\"Select a target currency\");\n\n  // Capture selection values\n  const [baseCurrency,setBaseCurrency] = useState('');\n  const [targetCurrency,setTargetCurrency] = useState('');\n  const [exchangeRates, setExchangeRates] = useState([]);\n\n  const baseCurrencySelect = (e) => {\n    setBaseCurrency(e);\n  }\n  const targetCurrencySelect = (e) => {\n    setTargetCurrency(e);\n  }\n\n  // DatePicker\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n\n  // Format Date object to string\n  const startDateRate = format(startDate, \"yyyy-MM-dd\");\n  const endDateRate = format(endDate, \"yyyy-MM-dd\");\n\n  // Get exchange rates info from selected values\n  async function getRatesFromDates(startDate, endDate, baseCurrency, targetCurrency) {\n    try {\n      let response = await fetch('https://api.exchangeratesapi.io/history?start_at=' +\n                                    startDate + '&end_at=' + endDate + '&base=' + baseCurrency + '&symbols=' + targetCurrency);\n      let jsonData = await response.json();\n      return jsonData.rates;\n     } catch(error) {\n      console.error(error);\n    }\n  }\n\n  const getListCurrencyExchangeRate = () => {\n    console.log(\"getListCurrencyExchangeRate\");\n    getRatesFromDates(startDateRate, endDateRate, baseCurrency, targetCurrency)\n    .then( res =>{\n      let list = [];\n      Object.keys(res).forEach(key => {\n        list.push({ date: key,\n                    baseCurrencyName: baseCurrency,\n                    targetCurrencyName: targetCurrency,\n                    //baseCurrencyValue: res[key][baseCurrency],\n                    targetCurrencyValue: res[key][targetCurrency]\n                 })\n      })\n      // Sort data based on time\n      list = list.sort((a, b) => (new Date(a.date)).getTime() - (new Date(b.date)).getTime())\n      console.log(JSON.stringify(list));\n      setExchangeRates(list);\n    })\n  }\n  console.log(exchangeRates);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Currency Rate History</h1>\n      </header>\n      <div className=\"QueryArea\">\n        <Form>\n          <Container>\n            <Row>\n              <Col sm={12} md={6} lg={3}>\n                Select base currency: {baseCurrency}\n                <Dropdown\n                  onSelect={eventKey => {\n                    const { code, title } = countries.find(({ curr_code }) => eventKey === curr_code);\n                    setToggleContents(<><FlagIcon code={code} /> {title}</>);\n                  }}>\n                  <Dropdown.Toggle variant=\"outline-secondary\" id=\"base_currency\" className=\"text-left\">\n                    {toggleContents}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {countries.map(({ code, title, curr_code }) => (\n                      <Dropdown.Item\n                        key={code}\n                        eventKey={curr_code}\n                        onSelect={baseCurrencySelect}>\n                        <FlagIcon code={code} />&nbsp;&nbsp;{title}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n              <Col sm={12} md={6} lg={3}>\n                Select target currency: {targetCurrency}\n                <Dropdown\n                  onSelect={eventKey => {\n                    const { code, title } = countries.find(({ curr_code }) => eventKey === curr_code);\n                    setToggleContents2(<><FlagIcon code={code} /> {title}</>);\n                  }}>\n                  <Dropdown.Toggle variant=\"outline-secondary\" id=\"to_currency\" className=\"text-left\">\n                    {toggleContents2}\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    {countries.map(({ code, title, curr_code }) => (\n                      <Dropdown.Item\n                        key={code}\n                        eventKey={curr_code}\n                        onSelect={targetCurrencySelect}>\n                        <FlagIcon code={code} />&nbsp;&nbsp;{title}\n                      </Dropdown.Item>\n                    ))}\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n              <Col sm={12} md={6} lg={3}>\n                From: {startDateRate}\n                <DatePicker\n                  id=\"fromDate\"\n                  dateFormat=\"yyyy-MM-dd\"\n                  selected={startDate}\n                  minDate={subYears(new Date(), 22)}\n                  maxDate={addDays(new Date(), 0)}\n                  onChange={date => setStartDate(date)} />\n              </Col>\n              <Col sm={12} md={6} lg={3}>\n                To: {endDateRate}\n                <DatePicker\n                  id=\"toDate\"\n                  dateFormat=\"yyyy-MM-dd\"\n                  selected={endDate}\n                  minDate={subYears(new Date(), 22)}\n                  maxDate={addDays(new Date(), 0)}\n                  onChange={date => setEndDate(date)} />\n              </Col>\n            </Row>\n            <Row>\n              <Col>\n                <Button variant=\"primary\" size=\"lg\" block onClick={getListCurrencyExchangeRate}>\n                  List currency exchange rate\n                </Button>\n              </Col>\n            </Row>\n          </Container>\n        </Form>\n      </div>\n      <div className=\"ResultArea\">\n        <Container>\n          <Row>\n            <Col sm>\n              <>\n                <Table responsive striped bordered hover id=\"rateTable\" size=\"sm\" variant=\"dark\">\n                  <thead>\n                    <tr>\n                      <th></th>\n                      {exchangeRates.map((rateArray, index) =>\n                      <th key={index}>{rateArray.baseCurrencyName} -> {rateArray.targetCurrencyName}</th>)}\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {exchangeRates.map((rateArray, index) =>\n                      (<tr key={index}>\n                        <td>{rateArray.date}</td>\n                      {/*  <td>{rateArray.baseCurrencyName}</td>\n                        <td>{(Math.round((rateArray.baseCurrencyValue + Number.EPSILON) * 100) / 100).toFixed(2)}</td>\n                        <td>-</td>\n                        <td>{rateArray.targetCurrencyName}:</td> */}\n                        <td>{(Math.round((rateArray.targetCurrencyValue + Number.EPSILON) * 100) / 100).toFixed(2)}</td>\n                      </tr>))}\n                  </tbody>\n                </Table>\n              </>\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n// Put any other imports below so that CSS from your\n// components takes precedence over default styles.\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}